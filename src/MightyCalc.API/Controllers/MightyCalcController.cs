//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace MightyCalc.API
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public interface IApiController
    {
        /// <summary>Calculate an expression</summary>
        /// <returns>Calculation succeeded</returns>
        System.Threading.Tasks.Task<double> CalculateAsync(Expression body);
    
        /// <summary>Returns user-defined functions. This list can be changed by POST /func</summary>
        /// <param name="name">Function name pattern to seach for</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NamedExpression>> FindFunctionsAsync(string name);
    
        /// <summary>Creates a new user-defined function</summary>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task CreateFunctionAsync(NamedExpression body);
    
        /// <summary>Replaces a user-defined function</summary>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task ReplaceFunctionAsync(NamedExpression body);
    
        /// <summary>Get total usage statistics</summary>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<Report> UsageTotalStatsAsync();
    
        /// <summary>Get usage statistics for logged user</summary>
        /// <param name="from">start of the report period</param>
        /// <param name="to">end of the report period</param>
        /// <returns>successful operation</returns>
        System.Threading.Tasks.Task<PeriodReport> UserUsageStatsAsync(System.DateTimeOffset? from, System.DateTimeOffset? to);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IApiController _implementation;
    
        public ApiController(IApiController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Calculate an expression</summary>
        /// <returns>Calculation succeeded</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("calc")]
        public System.Threading.Tasks.Task<double> Calculate([Microsoft.AspNetCore.Mvc.FromBody] Expression body)
        {
            return _implementation.CalculateAsync(body);
        }
    
        /// <summary>Returns user-defined functions. This list can be changed by POST /func</summary>
        /// <param name="name">Function name pattern to seach for</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("func")]
        public System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<NamedExpression>> FindFunctions(string name)
        {
            return _implementation.FindFunctionsAsync(name);
        }
    
        /// <summary>Creates a new user-defined function</summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("func")]
        public System.Threading.Tasks.Task CreateFunction([Microsoft.AspNetCore.Mvc.FromBody] NamedExpression body)
        {
            return _implementation.CreateFunctionAsync(body);
        }
    
        /// <summary>Replaces a user-defined function</summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("func")]
        public System.Threading.Tasks.Task ReplaceFunction([Microsoft.AspNetCore.Mvc.FromBody] NamedExpression body)
        {
            return _implementation.ReplaceFunctionAsync(body);
        }
    
        /// <summary>Get total usage statistics</summary>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("stats/total")]
        public System.Threading.Tasks.Task<Report> UsageTotalStats()
        {
            return _implementation.UsageTotalStatsAsync();
        }
    
        /// <summary>Get usage statistics for logged user</summary>
        /// <param name="from">start of the report period</param>
        /// <param name="to">end of the report period</param>
        /// <returns>successful operation</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("stats/user")]
        public System.Threading.Tasks.Task<PeriodReport> UserUsageStats(System.DateTimeOffset? from, System.DateTimeOffset? to)
        {
            return _implementation.UserUsageStatsAsync(from, to);
        }
    
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FunctionUsage 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("usageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UsageCount { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FunctionUsage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionUsage>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FunctionPeriodUsage 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("usageCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UsageCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("periodStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PeriodStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("periodEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PeriodEnd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Period { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static FunctionPeriodUsage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionPeriodUsage>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PeriodReport 
    {
        [Newtonsoft.Json.JsonProperty("UsageStatistics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FunctionPeriodUsage> UsageStatistics { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static PeriodReport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PeriodReport>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Report 
    {
        [Newtonsoft.Json.JsonProperty("UsageStatistics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FunctionUsage> UsageStatistics { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Report FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Report>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Parameter 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Parameter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Parameter>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Expression 
    {
        [Newtonsoft.Json.JsonProperty("representation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Representation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Parameter> Parameters { get; set; } = new System.Collections.Generic.List<Parameter>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Expression FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Expression>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class NamedExpression 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Expression Expression { get; set; } = new Expression();
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static NamedExpression FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NamedExpression>(data);
        }
    
    }

    #pragma warning restore
}