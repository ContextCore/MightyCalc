petabridge.cmd{
	host = "0.0.0.0"
	port = 30032
}

akka {

    actor {
           provider = "Akka.Cluster.ClusterActorRefProvider, Akka.Cluster"
           serializers {
                          hyperion = "Akka.Serialization.HyperionSerializer, Akka.Serialization.Hyperion"
                       }
                        
            serialization-bindings {
                       "System.Object" = hyperion
            }
    }
    
    remote {
           dot-netty.tcp {
                      port = 30030
                      hostname = localhost
                  }
           }
                            
    cluster {
        seed-nodes = ["akka.tcp://MightyCalc@localhost:30031"]
        roles = [calculation, projection]
        #role.["calculation"].min-nr-of-members = 1
        #role.["projection"].min-nr-of-members = 1
        #auto-down-unreachable-after = 30s #only for local test config! 
    } 
    
    persistence{
    
        query.journal.sql {
                class = "Akka.Persistence.Query.Sql.SqlReadJournalProvider, Akka.Persistence.Query.Sql"
                refresh-interval = 1s
                max-buffer-size = 1
            }
        
        journal {
            plugin = "akka.persistence.journal.postgresql"
            postgresql {
                # qualified type name of the PostgreSql persistence journal actor
                class = "Akka.Persistence.PostgreSql.Journal.PostgreSqlJournal, Akka.Persistence.PostgreSql"
    
                event-adapters {
                     tagging = "MightyCalc.Node.DomainEventAdapter, MightyCalc.Node"
                  }
    
                event-adapter-bindings {
                    "MightyCalc.Node.IDomainEvent, MightyCalc.Node" = tagging
                }
                # connection string used for database access
                connection-string = "Host=localhost;Port=30020;Database=journal;User ID=postgres;"
    
                
                # default SQL commands timeout
                connection-timeout = 30s
    
                # PostgreSql schema name to table corresponding with persistent journal
                schema-name = public
    
                # PostgreSql table corresponding with persistent journal
                table-name = event_journal
    
                # should corresponding journal table be initialized automatically
                auto-initialize = on
                
                # metadata table
                metadata-table-name = metadata
    
                # Postgres data type for payload column. Allowed options: bytea, json, jsonb
                stored-as = bytea
    
                # Setting used to toggle sequential read access when loading large objects
                # from journals and snapshot stores.
                sequential-access = off
            }
        }
        snapshot-store {
            plugin = "akka.persistence.snapshot-store.postgresql"
            postgresql {
                # qualified type name of the PostgreSql persistence journal actor
                class = "Akka.Persistence.PostgreSql.Snapshot.PostgreSqlSnapshotStore, Akka.Persistence.PostgreSql"
    
                # connection string used for database access
                connection-string = "Host=localhost;Port=30020;Database=snapshotstore;User ID=postgres;"
    
                # PostgreSql schema name to table corresponding with persistent journal
                schema-name = public
    
                # PostgreSql table corresponding with persistent journal
                table-name = snapshot_store
    
                # should corresponding journal table be initialized automatically
                auto-initialize = on
            }
        }
    }
}